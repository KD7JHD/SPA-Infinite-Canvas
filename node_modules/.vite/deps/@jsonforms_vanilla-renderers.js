import {
  Control,
  DispatchCell,
  Helpers,
  JsonFormsDispatch,
  NOT_APPLICABLE,
  Paths,
  Resolve,
  and,
  compose,
  computeLabel,
  convertToValidClassName,
  createDefaultValue,
  deriveLabelForUISchemaElement,
  encode,
  findUISchema,
  getAjv,
  getConfig,
  getControlPath,
  index,
  isBooleanControl,
  isControl,
  isDateControl,
  isDateTimeControl,
  isDescriptionHidden,
  isEnumControl,
  isIntegerControl,
  isMultiLineControl,
  isNumberControl,
  isNumberFormatControl,
  isObjectArrayWithNesting,
  isOneOfEnumControl,
  isRangeControl,
  isStringControl,
  isTimeControl,
  isVisible,
  optionIs,
  rankWith,
  require_LodashWrapper,
  require_arrayMap,
  require_baseEach,
  require_baseIteratee,
  require_convert,
  require_filter,
  require_flatRest,
  require_getData,
  require_getFuncName,
  require_isArray,
  require_isArrayLike,
  require_isEmpty,
  require_isLaziable,
  require_keys,
  require_maxBy,
  require_merge,
  require_placeholder,
  require_range,
  require_reduce,
  require_remove,
  require_startCase,
  uiTypeIs,
  useJsonForms,
  withArrayTranslationProps,
  withJsonFormsArrayControlProps,
  withJsonFormsCellProps,
  withJsonFormsControlProps,
  withJsonFormsEnumCellProps,
  withJsonFormsEnumProps,
  withJsonFormsLabelProps,
  withJsonFormsLayoutProps,
  withJsonFormsOneOfEnumCellProps,
  withJsonFormsOneOfEnumProps,
  withTranslateProps
} from "./chunk-2HU7GH6T.js";
import "./chunk-J3RLJ2XB.js";
import {
  require_react
} from "./chunk-RLJ2RCJQ.js";
import {
  __commonJS,
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/lodash/join.js
var require_join = __commonJS({
  "node_modules/lodash/join.js"(exports, module) {
    var arrayProto = Array.prototype;
    var nativeJoin = arrayProto.join;
    function join2(array, separator) {
      return array == null ? "" : nativeJoin.call(array, separator);
    }
    module.exports = join2;
  }
});

// node_modules/lodash/fp/filter.js
var require_filter2 = __commonJS({
  "node_modules/lodash/fp/filter.js"(exports, module) {
    var convert = require_convert();
    var func = convert("filter", require_filter());
    func.placeholder = require_placeholder();
    module.exports = func;
  }
});

// node_modules/lodash/_baseMap.js
var require_baseMap = __commonJS({
  "node_modules/lodash/_baseMap.js"(exports, module) {
    var baseEach = require_baseEach();
    var isArrayLike = require_isArrayLike();
    function baseMap(collection, iteratee) {
      var index2 = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
      baseEach(collection, function(value, key, collection2) {
        result[++index2] = iteratee(value, key, collection2);
      });
      return result;
    }
    module.exports = baseMap;
  }
});

// node_modules/lodash/map.js
var require_map = __commonJS({
  "node_modules/lodash/map.js"(exports, module) {
    var arrayMap = require_arrayMap();
    var baseIteratee = require_baseIteratee();
    var baseMap = require_baseMap();
    var isArray = require_isArray();
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, baseIteratee(iteratee, 3));
    }
    module.exports = map;
  }
});

// node_modules/lodash/fp/map.js
var require_map2 = __commonJS({
  "node_modules/lodash/fp/map.js"(exports, module) {
    var convert = require_convert();
    var func = convert("map", require_map());
    func.placeholder = require_placeholder();
    module.exports = func;
  }
});

// node_modules/lodash/_createFlow.js
var require_createFlow = __commonJS({
  "node_modules/lodash/_createFlow.js"(exports, module) {
    var LodashWrapper = require_LodashWrapper();
    var flatRest = require_flatRest();
    var getData = require_getData();
    var getFuncName = require_getFuncName();
    var isArray = require_isArray();
    var isLaziable = require_isLaziable();
    var FUNC_ERROR_TEXT = "Expected a function";
    var WRAP_CURRY_FLAG = 8;
    var WRAP_PARTIAL_FLAG = 32;
    var WRAP_ARY_FLAG = 128;
    var WRAP_REARG_FLAG = 256;
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length, index2 = length, prereq = LodashWrapper.prototype.thru;
        if (fromRight) {
          funcs.reverse();
        }
        while (index2--) {
          var func = funcs[index2];
          if (typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == "wrapper") {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index2 = wrapper ? index2 : length;
        while (++index2 < length) {
          func = funcs[index2];
          var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : void 0;
          if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments, value = args[0];
          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index3 = 0, result = length ? funcs[index3].apply(this, args) : value;
          while (++index3 < length) {
            result = funcs[index3].call(this, result);
          }
          return result;
        };
      });
    }
    module.exports = createFlow;
  }
});

// node_modules/lodash/flow.js
var require_flow = __commonJS({
  "node_modules/lodash/flow.js"(exports, module) {
    var createFlow = require_createFlow();
    var flow = createFlow();
    module.exports = flow;
  }
});

// node_modules/lodash/fp/flow.js
var require_flow2 = __commonJS({
  "node_modules/lodash/fp/flow.js"(exports, module) {
    var convert = require_convert();
    var func = convert("flow", require_flow());
    func.placeholder = require_placeholder();
    module.exports = func;
  }
});

// node_modules/lodash/fp/_falseOptions.js
var require_falseOptions = __commonJS({
  "node_modules/lodash/fp/_falseOptions.js"(exports, module) {
    module.exports = {
      "cap": false,
      "curry": false,
      "fixed": false,
      "immutable": false,
      "rearg": false
    };
  }
});

// node_modules/lodash/fp/keys.js
var require_keys2 = __commonJS({
  "node_modules/lodash/fp/keys.js"(exports, module) {
    var convert = require_convert();
    var func = convert("keys", require_keys(), require_falseOptions());
    func.placeholder = require_placeholder();
    module.exports = func;
  }
});

// node_modules/lodash/fp/startCase.js
var require_startCase2 = __commonJS({
  "node_modules/lodash/fp/startCase.js"(exports, module) {
    var convert = require_convert();
    var func = convert("startCase", require_startCase(), require_falseOptions());
    func.placeholder = require_placeholder();
    module.exports = func;
  }
});

// node_modules/@jsonforms/vanilla-renderers/lib/jsonforms-react-vanilla.esm.js
var import_maxBy = __toESM(require_maxBy());
var import_react = __toESM(require_react());
var import_isEmpty = __toESM(require_isEmpty());
var import_remove = __toESM(require_remove());
var import_join = __toESM(require_join());
var import_filter = __toESM(require_filter());
var import_reduce = __toESM(require_reduce());
var import_merge = __toESM(require_merge());
var import_range = __toESM(require_range());
var import_filter2 = __toESM(require_filter2());
var import_map = __toESM(require_map2());
var import_flow = __toESM(require_flow2());
var import_keys = __toESM(require_keys2());
var import_startCase = __toESM(require_startCase2());
var REGISTER_STYLE = "REGISTER_STYLE";
var REGISTER_STYLES = "REGISTER_STYLES";
var UNREGISTER_STYLE = "UNREGISTER_STYLE";
var registerStyle$1 = (styleName, classNames) => ({
  type: REGISTER_STYLE,
  name: styleName,
  classNames
});
var unregisterStyle = (styleName) => ({
  type: UNREGISTER_STYLE,
  name: styleName
});
var registerStyles = (styleDefs) => ({
  type: REGISTER_STYLES,
  styles: styleDefs
});
var i18nDefaults = {
  "enum.none": "None"
};
var removeStyle = (styles, name) => {
  const copy = styles.slice();
  (0, import_remove.default)(copy, (styleDef) => styleDef.name === name);
  return copy;
};
var registerStyle = (styles, { name, classNames }) => {
  const copy = removeStyle(styles, name);
  copy.push({ name, classNames });
  return copy;
};
var findStyle = (styles) => (style, ...args) => {
  const foundStyles = (0, import_filter.default)(styles, (s) => s.name === style);
  return (0, import_reduce.default)(foundStyles, (res, style2) => {
    if (typeof style2.classNames === "function") {
      return res.concat(style2.classNames(args));
    }
    return res.concat(style2.classNames);
  }, []);
};
var findStyleAsClassName = (styles) => (style, ...args) => (0, import_join.default)(findStyle(styles)(style, args), " ");
var stylingReducer = (state = [], action) => {
  switch (action.type) {
    case REGISTER_STYLE: {
      return registerStyle(state, {
        name: action.name,
        classNames: action.classNames
      });
    }
    case REGISTER_STYLES: {
      return action.styles.reduce((allStyles, style) => registerStyle(allStyles, style), state);
    }
    case UNREGISTER_STYLE: {
      return removeStyle(state, action.name);
    }
    default:
      return state;
  }
};
var getStyle = (state) => (styleName, ...args) => findStyle(state.jsonforms.styles)(styleName, args);
var getStyleAsClassName = (state) => (styleName, ...args) => findStyleAsClassName(state.jsonforms.styles)(styleName, args);
var vanillaStyles = [
  {
    name: "control",
    classNames: ["control"]
  },
  {
    name: "control.trim",
    classNames: ["trim"]
  },
  {
    name: "control.input",
    classNames: ["input"]
  },
  {
    name: "control.select",
    classNames: ["select"]
  },
  {
    name: "control.checkbox",
    classNames: ["checkbox"]
  },
  {
    name: "control.radio",
    classNames: ["radio"]
  },
  {
    name: "control.radio.option",
    classNames: ["radio-option"]
  },
  {
    name: "control.radio.input",
    classNames: ["radio-input"]
  },
  {
    name: "control.radio.label",
    classNames: ["radio-label"]
  },
  {
    name: "control.validation.error",
    classNames: ["validation_error"]
  },
  {
    name: "control.validation",
    classNames: ["validation"]
  },
  {
    name: "categorization",
    classNames: ["categorization"]
  },
  {
    name: "categorization.master",
    classNames: ["categorization-master"]
  },
  {
    name: "categorization.detail",
    classNames: ["categorization-detail"]
  },
  {
    name: "category.group",
    classNames: ["category-group"]
  },
  {
    name: "category.subcategories",
    classNames: ["category-subcategories"]
  },
  {
    name: "array.layout",
    classNames: ["array-layout"]
  },
  {
    name: "array.children",
    classNames: ["children"]
  },
  {
    name: "group.layout",
    classNames: ["group-layout"]
  },
  {
    name: "horizontal.layout",
    classNames: ["horizontal-layout"]
  },
  {
    name: "horizontal.layout.item",
    classNames: ([size]) => [`horizontal-layout-${size}`]
  },
  {
    name: "vertical.layout",
    classNames: ["vertical-layout"]
  },
  {
    name: "array.table.validation.error",
    classNames: ["validation_error"]
  },
  {
    name: "array.table.validation",
    classNames: ["validation"]
  },
  {
    name: "array.table",
    classNames: ["array-table-layout", "control"]
  },
  {
    name: "array.control.validation.error",
    classNames: ["validation_error"]
  },
  {
    name: "array.control.validation",
    classNames: ["validation"]
  },
  {
    name: "array.control.add",
    classNames: ["button-add"]
  },
  {
    name: "array.child.controls",
    classNames: ["child-controls"]
  },
  {
    name: "array.child.controls.up",
    classNames: ["button-up"]
  },
  {
    name: "array.child.controls.down",
    classNames: ["button-down"]
  },
  {
    name: "array.child.controls.delete",
    classNames: ["button-delete"]
  },
  {
    name: "array.control",
    classNames: ["array-control-layout", "control"]
  },
  {
    name: "input.description",
    classNames: ["input-description"]
  }
];
var defaultContext = {
  styles: vanillaStyles
};
var JsonFormsStyleContext = import_react.default.createContext(defaultContext);
var useStyleContext = () => (0, import_react.useContext)(JsonFormsStyleContext);
var useStyles = () => {
  const { styles } = useStyleContext();
  return styles;
};
var addVanillaControlProps = (mapStateToProps) => (state, ownProps) => {
  const props = mapStateToProps(state, ownProps);
  const config = getConfig(state);
  const trim = config.trim;
  const controlElement = props.uischema;
  const isValid = (0, import_isEmpty.default)(props.errors);
  const styles = getStyle(state)("control");
  let classNames = !(0, import_isEmpty.default)(controlElement.scope) ? styles.concat([`${convertToValidClassName(controlElement.scope)}`]) : [""];
  if (trim) {
    classNames = classNames.concat(getStyle(state)("control.trim"));
  }
  const labelClass = getStyleAsClassName(state)("control.label");
  const descriptionClassName = getStyleAsClassName(state)("input.description");
  const validationClassName = getStyleAsClassName(state)("control.validation");
  const validationErrorClassName = getStyleAsClassName(state)("control.validation.error");
  const inputClassName = ["validate"].concat(isValid ? "valid" : "invalid");
  return {
    ...props,
    getStyleAsClassName: getStyleAsClassName(state),
    getStyle: getStyle(state),
    classNames: {
      wrapper: classNames.join(" "),
      input: inputClassName.join(" "),
      label: labelClass,
      description: descriptionClassName,
      validation: validationClassName,
      validationError: validationErrorClassName
    }
  };
};
var withVanillaControlProps = (Component) => function WithVanillaControlProps(props) {
  const ctx = useJsonForms();
  const contextStyles = useStyles();
  const controlElement = props.uischema;
  const config = ctx.config;
  const trim = config && config.trim;
  const styles = (0, import_react.useMemo)(() => findStyle(contextStyles)("control"), [contextStyles]);
  let classNames = !(0, import_isEmpty.default)(controlElement.scope) ? styles.concat([`${convertToValidClassName(controlElement.scope)}`]) : [""];
  if (trim) {
    classNames = classNames.concat(findStyle(contextStyles)("control.trim"));
  }
  const isValid = (0, import_isEmpty.default)(props.errors);
  const labelClass = (0, import_react.useMemo)(() => findStyleAsClassName(contextStyles)("control.label"), [contextStyles]);
  const descriptionClassName = (0, import_react.useMemo)(() => findStyleAsClassName(contextStyles)("input.description"), [contextStyles]);
  const validationClassName = (0, import_react.useMemo)(() => findStyleAsClassName(contextStyles)("control.validation"), [contextStyles]);
  const validationErrorClassName = (0, import_react.useMemo)(() => findStyleAsClassName(contextStyles)("control.validation.error"), [contextStyles]);
  const inputClassName = ["validate"].concat(isValid ? "valid" : "invalid");
  const getStyleAsClassName2 = (0, import_react.useMemo)(() => findStyleAsClassName(contextStyles), [contextStyles]);
  const getStyle2 = (0, import_react.useMemo)(() => findStyle(contextStyles), [contextStyles]);
  const wrapper = classNames.join(" ");
  const input = inputClassName.join(" ");
  const classNamesProp = (0, import_react.useMemo)(() => ({
    wrapper,
    input,
    label: labelClass,
    description: descriptionClassName,
    validation: validationClassName,
    validationError: validationErrorClassName
  }), [
    wrapper,
    input,
    labelClass,
    descriptionClassName,
    validationClassName,
    validationErrorClassName
  ]);
  return import_react.default.createElement(Component, { ...props, getStyleAsClassName: getStyleAsClassName2, getStyle: getStyle2, classNames: classNamesProp });
};
var addVanillaLayoutProps = (mapStateToProps) => (state, ownProps) => {
  const props = mapStateToProps(state, ownProps);
  return {
    ...props,
    getStyleAsClassName: getStyleAsClassName(state),
    getStyle: getStyle(state)
  };
};
var addVanillaCellProps = (mapStateToCellsProps) => (state, ownProps) => {
  const props = mapStateToCellsProps(state, ownProps);
  const inputClassName = ["validate"].concat(props.isValid ? "valid" : "invalid");
  return {
    ...props,
    className: inputClassName.join(" "),
    getStyleAsClassName: getStyleAsClassName(state),
    getStyle: getStyle(state)
  };
};
var withVanillaCellPropsForType = (type) => (Component) => function WithVanillaCellPropsForType(props) {
  const inputClassName = ["validate"].concat(props.isValid ? "valid" : "invalid");
  const styles = useStyles();
  const definedStyle = findStyleAsClassName(styles)(type);
  if (definedStyle) {
    inputClassName.push(definedStyle);
  }
  return import_react.default.createElement(Component, { ...props, getStyleAsClassName: findStyleAsClassName(styles), getStyle: findStyle(styles), className: inputClassName.join(" ") });
};
var withAjvProps = (Component) => function WithAjvProps(props) {
  const ctx = useJsonForms();
  const ajv = getAjv({ jsonforms: { ...ctx } });
  return import_react.default.createElement(Component, { ...props, ajv });
};
var withVanillaCellProps = withVanillaCellPropsForType("control.input");
var withVanillaEnumCellProps = withVanillaCellPropsForType("control.select");
var withVanillaBooleanCellProps = withVanillaCellPropsForType("control.checkbox");
var InputControl = class extends Control {
  render() {
    const { classNames, description, id, errors, label, uischema, schema, rootSchema, visible, enabled, required, path, cells, config } = this.props;
    const isValid = errors.length === 0;
    const divClassNames = [classNames.validation].concat(isValid ? classNames.description : classNames.validationError).join(" ");
    const appliedUiSchemaOptions = (0, import_merge.default)({}, config, uischema.options);
    const showDescription = !isDescriptionHidden(visible, description, this.state.isFocused, appliedUiSchemaOptions.showUnfocusedDescription);
    const testerContext = {
      rootSchema,
      config
    };
    const cell = (0, import_maxBy.default)(cells, (r) => r.tester(uischema, schema, testerContext));
    if (cell === void 0 || cell.tester(uischema, schema, testerContext) === NOT_APPLICABLE) {
      console.warn("No applicable cell found.", uischema, schema);
      return null;
    } else {
      return import_react.default.createElement(
        "div",
        { className: classNames.wrapper, hidden: !visible, onFocus: this.onFocus, onBlur: this.onBlur, id },
        import_react.default.createElement("label", { htmlFor: id + "-input", className: classNames.label }, computeLabel(label, required, appliedUiSchemaOptions.hideRequiredAsterisk)),
        import_react.default.createElement(DispatchCell, { uischema, schema, path, id: id + "-input", enabled }),
        import_react.default.createElement("div", { className: divClassNames }, !isValid ? errors : showDescription ? description : null)
      );
    }
  }
};
var inputControlTester = rankWith(1, isControl);
var InputControl$1 = withVanillaControlProps(withJsonFormsControlProps(InputControl));
var RadioGroup = ({ classNames, id, label, options, required, description, errors, data, uischema, visible, config, enabled, path, handleChange }) => {
  const contextStyles = useStyles();
  const [isFocused, setFocus] = (0, import_react.useState)(false);
  const radioControl = (0, import_react.useMemo)(() => findStyleAsClassName(contextStyles)("control.radio"), [contextStyles]);
  const radioOption = (0, import_react.useMemo)(() => findStyleAsClassName(contextStyles)("control.radio.option"), [contextStyles]);
  const radioInput = (0, import_react.useMemo)(() => findStyleAsClassName(contextStyles)("control.radio.input"), [contextStyles]);
  const radioLabel = (0, import_react.useMemo)(() => findStyleAsClassName(contextStyles)("control.radio.label"), [contextStyles]);
  const isValid = errors.length === 0;
  const divClassNames = [classNames.validation].concat(isValid ? classNames.description : classNames.validationError).join(" ");
  const appliedUiSchemaOptions = (0, import_merge.default)({}, config, uischema.options);
  const showDescription = !isDescriptionHidden(visible, description, isFocused, appliedUiSchemaOptions.showUnfocusedDescription);
  const hasRadioClass = !radioControl || radioControl === "radio";
  let groupStyle = {};
  if (hasRadioClass) {
    groupStyle = {
      display: "flex",
      flexDirection: "vertical" === appliedUiSchemaOptions.orientation ? "column" : "row"
    };
  }
  return import_react.default.createElement(
    "div",
    { className: classNames.wrapper, hidden: !visible, onFocus: () => setFocus(true), onBlur: () => setFocus(false) },
    import_react.default.createElement("label", { htmlFor: id, className: classNames.label }, computeLabel(label, required, appliedUiSchemaOptions.hideRequiredAsterisk)),
    import_react.default.createElement("div", { className: radioControl, style: groupStyle }, options.map((option) => import_react.default.createElement(
      "div",
      { key: option.label, className: radioOption },
      import_react.default.createElement("input", { type: "radio", value: option.value, id: option.value, name: id, checked: data === option.value, onChange: (_) => handleChange(path, option.value), disabled: !enabled, className: radioInput }),
      import_react.default.createElement("label", { htmlFor: option.value, className: radioLabel }, option.label)
    ))),
    import_react.default.createElement("div", { className: divClassNames }, !isValid ? errors : showDescription ? description : null)
  );
};
var RadioGroupControl = (props) => {
  return import_react.default.createElement(RadioGroup, { ...props });
};
var radioGroupControlTester = rankWith(3, and(isEnumControl, optionIs("format", "radio")));
var RadioGroupControl$1 = withVanillaControlProps(withJsonFormsEnumProps(RadioGroupControl));
var OneOfRadioGroupControl = (props) => {
  return import_react.default.createElement(RadioGroup, { ...props });
};
var oneOfRadioGroupControlTester = rankWith(3, and(isOneOfEnumControl, optionIs("format", "radio")));
var OneOfRadioGroupControl$1 = withVanillaControlProps(withJsonFormsOneOfEnumProps(OneOfRadioGroupControl));
var { convertToValidClassName: convertToValidClassName$1 } = Helpers;
var ArrayControl = ({ classNames, data, label, path, schema, errors, addItem, removeItems, moveUp, moveDown, uischema, uischemas, getStyleAsClassName: getStyleAsClassName2, renderers, rootSchema, translations, enabled }) => {
  const controlElement = uischema;
  const childUiSchema = (0, import_react.useMemo)(() => findUISchema(uischemas, schema, uischema.scope, path, void 0, uischema, rootSchema), [uischemas, schema, uischema.scope, path, uischema, rootSchema]);
  const isValid = errors.length === 0;
  const validationClass = getStyleAsClassName2("array.control.validation");
  const divClassNames = [validationClass].concat(isValid ? "" : getStyleAsClassName2("array.control.validation.error")).join(" ");
  const buttonClassAdd = getStyleAsClassName2("array.control.add");
  const labelClass = getStyleAsClassName2("array.control.label");
  const childControlsClass = getStyleAsClassName2("array.child.controls");
  const buttonClassUp = getStyleAsClassName2("array.child.controls.up");
  const buttonClassDown = getStyleAsClassName2("array.child.controls.down");
  const buttonClassDelete = getStyleAsClassName2("array.child.controls.delete");
  const controlClass = [
    getStyleAsClassName2("array.control"),
    convertToValidClassName$1(controlElement.scope)
  ].join(" ");
  return import_react.default.createElement(
    "div",
    { className: controlClass },
    import_react.default.createElement(
      "header",
      null,
      import_react.default.createElement("label", { className: labelClass }, label),
      import_react.default.createElement(
        "button",
        { type: "button", className: buttonClassAdd, disabled: !enabled, onClick: addItem(path, createDefaultValue(schema, rootSchema)) },
        "Add to ",
        label
      )
    ),
    import_react.default.createElement("div", { className: divClassNames }, errors),
    import_react.default.createElement("div", { className: classNames.children }, data ? (0, import_range.default)(0, data.length).map((index2) => {
      const childPath = compose(path, `${index2}`);
      return import_react.default.createElement(
        "div",
        { key: index2 },
        import_react.default.createElement(JsonFormsDispatch, { schema, uischema: childUiSchema || uischema, path: childPath, key: childPath, renderers }),
        import_react.default.createElement(
          "div",
          { className: childControlsClass },
          import_react.default.createElement("button", { type: "button", className: buttonClassUp, disabled: !enabled, "aria-label": translations.upAriaLabel, onClick: () => {
            moveUp(path, index2)();
          } }, translations.up),
          import_react.default.createElement("button", { type: "button", className: buttonClassDown, disabled: !enabled, "aria-label": translations.downAriaLabel, onClick: () => {
            moveDown(path, index2)();
          } }, translations.down),
          import_react.default.createElement("button", { type: "button", className: buttonClassDelete, disabled: !enabled, "aria-label": translations.removeAriaLabel, onClick: () => {
            if (window.confirm("Are you sure you wish to delete this item?")) {
              removeItems(path, [index2])();
            }
          } }, translations.removeTooltip)
        )
      );
    }) : import_react.default.createElement("p", null, translations.noDataMessage))
  );
};
var ArrayControlRenderer = ({ schema, uischema, data, path, rootSchema, uischemas, addItem, getStyle: getStyle2, getStyleAsClassName: getStyleAsClassName2, removeItems, moveUp, moveDown, id, visible, enabled, errors, translations, arraySchema }) => {
  const controlElement = uischema;
  const labelDescription = Helpers.createLabelDescriptionFrom(controlElement, schema);
  const label = labelDescription.show ? labelDescription.text : "";
  const controlClassName = `control ${Helpers.convertToValidClassName(controlElement.scope)}`;
  const fieldSetClassName = getStyleAsClassName2("array.layout");
  const buttonClassName = getStyleAsClassName2("array.button");
  const childrenClassName = getStyleAsClassName2("array.children");
  const classNames = {
    wrapper: controlClassName,
    fieldSet: fieldSetClassName,
    button: buttonClassName,
    children: childrenClassName
  };
  return import_react.default.createElement(ArrayControl, { classNames, data, label, path, schema, arraySchema, errors, addItem, removeItems, moveUp, moveDown, uischema, uischemas, getStyleAsClassName: getStyleAsClassName2, rootSchema, id, visible, enabled, getStyle: getStyle2, translations });
};
var ArrayControlRenderer$1 = withVanillaControlProps(withJsonFormsArrayControlProps(withTranslateProps(withArrayTranslationProps(ArrayControlRenderer))));
var arrayControlTester = rankWith(4, isObjectArrayWithNesting);
var isCategorization = (category) => category.type === "Categorization";
var categorizationTester = rankWith(1, and(uiTypeIs("Categorization"), (uischema) => {
  const hasCategory = (element) => {
    if ((0, import_isEmpty.default)(element.elements)) {
      return false;
    }
    return element.elements.map((elem) => isCategorization(elem) ? hasCategory(elem) : elem.type === "Category").reduce((prev, curr) => prev && curr, true);
  };
  return hasCategory(uischema);
}));
var getCategoryClassName = (category, selectedCategory) => selectedCategory === category ? "selected" : "";
var CategorizationList = ({ selectedCategory, elements, data, depth, onSelect, subcategoriesClassName, groupClassName, t, ajv }) => {
  const filteredElements = (0, import_react.useMemo)(() => {
    return elements.filter((category) => isVisible(category, data, void 0, ajv));
  }, [elements, data, ajv]);
  const categoryLabels = (0, import_react.useMemo)(() => filteredElements.map((cat) => deriveLabelForUISchemaElement(cat, t)), [filteredElements, t]);
  return import_react.default.createElement("ul", { className: subcategoriesClassName }, filteredElements.map((category, idx) => {
    if (isCategorization(category)) {
      return import_react.default.createElement(
        "li",
        { key: categoryLabels[idx], className: groupClassName },
        import_react.default.createElement("span", null, categoryLabels[idx]),
        import_react.default.createElement(CategorizationList, { selectedCategory, elements: category.elements, data, ajv, depth: depth + 1, onSelect, subcategoriesClassName, groupClassName, t })
      );
    } else {
      return import_react.default.createElement(
        "li",
        { key: categoryLabels[idx], onClick: onSelect(idx), className: getCategoryClassName(category, selectedCategory) },
        import_react.default.createElement("span", null, categoryLabels[idx])
      );
    }
  }));
};
var SingleCategory = ({ category, schema, path }) => import_react.default.createElement("div", { id: "categorization.detail" }, (category.elements || []).map((child, index2) => import_react.default.createElement(JsonFormsDispatch, { key: `${path}-${index2}`, uischema: child, schema, path })));
var CategorizationRenderer = ({ data, uischema, schema, path, selected, t, visible, getStyleAsClassName: getStyleAsClassName2, onChange, ajv }) => {
  const categorization = uischema;
  const elements = categorization.elements;
  const classNames = getStyleAsClassName2("categorization");
  const masterClassNames = getStyleAsClassName2("categorization.master");
  const detailClassNames = getStyleAsClassName2("categorization.detail");
  const subcategoriesClassName = getStyleAsClassName2("category.subcategories");
  const groupClassName = getStyleAsClassName2("category.group");
  const [previousCategorization, setPreviousCategorization] = (0, import_react.useState)(uischema);
  const [activeCategory, setActiveCategory] = (0, import_react.useState)(selected ?? 0);
  const safeCategory = activeCategory >= categorization.elements.length ? 0 : activeCategory;
  if (categorization !== previousCategorization) {
    setActiveCategory(0);
    setPreviousCategorization(categorization);
  }
  const onCategorySelected = (categoryIndex) => () => {
    if (onChange) {
      return onChange(categoryIndex, safeCategory);
    }
    return setActiveCategory(categoryIndex);
  };
  return import_react.default.createElement(
    "div",
    { className: classNames, hidden: visible === null || visible === void 0 ? false : !visible },
    import_react.default.createElement(
      "div",
      { className: masterClassNames },
      import_react.default.createElement(CategorizationList, { elements, selectedCategory: elements[safeCategory], data, ajv, depth: 0, onSelect: onCategorySelected, subcategoriesClassName, groupClassName, t })
    ),
    import_react.default.createElement(
      "div",
      { className: detailClassNames },
      import_react.default.createElement(SingleCategory, { category: elements[safeCategory], schema, path, key: safeCategory })
    )
  );
};
var CategorizationRenderer$1 = withAjvProps(withVanillaControlProps(withTranslateProps(withJsonFormsLayoutProps(CategorizationRenderer))));
var labelRendererTester = rankWith(1, uiTypeIs("Label"));
var LabelRenderer = ({ text, visible, getStyleAsClassName: getStyleAsClassName2 }) => {
  const classNames = getStyleAsClassName2("label-control");
  const isHidden = !visible;
  return import_react.default.createElement("label", { hidden: isHidden, className: classNames }, text);
};
var LabelRenderer$1 = withVanillaControlProps(withJsonFormsLabelProps(LabelRenderer));
var { convertToValidClassName: convertToValidClassName2 } = Helpers;
var { or, isObjectArrayControl, isPrimitiveArrayControl, rankWith: rankWith2 } = index;
var tableArrayControlTester = rankWith2(3, or(isObjectArrayControl, isPrimitiveArrayControl));
var TableArrayControl = class extends import_react.default.Component {
  constructor() {
    super(...arguments);
    this.confirmDelete = (path, index2) => {
      const p = path.substring(0, path.lastIndexOf("."));
      this.props.removeItems(p, [index2])();
    };
  }
  render() {
    const { addItem, uischema, schema, rootSchema, path, data, visible, errors, label, getStyleAsClassName: getStyleAsClassName2, childErrors, translations, enabled } = this.props;
    const controlElement = uischema;
    const tableClass = getStyleAsClassName2("array.table.table");
    const labelClass = getStyleAsClassName2("array.table.label");
    const buttonClass = getStyleAsClassName2("array.table.button");
    const validationClass = getStyleAsClassName2("array.table.validation");
    const controlClass = [
      getStyleAsClassName2("array.table"),
      convertToValidClassName2(controlElement.scope)
    ].join(" ");
    const createControlElement = (key) => ({
      type: "Control",
      label: false,
      scope: schema.type === "object" ? `#/properties/${key}` : "#"
    });
    const isValid = errors.length === 0;
    const divClassNames = [validationClass].concat(isValid ? "" : getStyleAsClassName2("array.table.validation.error")).join(" ");
    return import_react.default.createElement(
      "div",
      { className: controlClass, hidden: !visible },
      import_react.default.createElement(
        "header",
        null,
        import_react.default.createElement("label", { className: labelClass }, label),
        import_react.default.createElement("button", { type: "button", disabled: !enabled, className: buttonClass, onClick: addItem(path, createDefaultValue(schema, rootSchema)) }, translations.addTooltip)
      ),
      import_react.default.createElement("div", { className: divClassNames }, !isValid ? errors : ""),
      import_react.default.createElement(
        "table",
        { className: tableClass },
        import_react.default.createElement(
          "thead",
          null,
          import_react.default.createElement(
            "tr",
            null,
            schema.properties ? (0, import_flow.default)(import_keys.default, (0, import_filter2.default)((prop) => schema.properties[prop].type !== "array"), (0, import_map.default)((prop) => import_react.default.createElement("th", { key: prop }, schema.properties[prop].title ?? (0, import_startCase.default)(prop))))(schema.properties) : import_react.default.createElement("th", null, "Items"),
            import_react.default.createElement("th", null, "Valid"),
            import_react.default.createElement("th", null, " ")
          )
        ),
        import_react.default.createElement("tbody", null, !data || !Array.isArray(data) || data.length === 0 ? import_react.default.createElement(
          "tr",
          null,
          import_react.default.createElement("td", null, translations.noDataMessage)
        ) : data.map((_child, index2) => {
          const childPath = Paths.compose(path, `${index2}`);
          const errorsPerEntry = (0, import_filter.default)(childErrors, (error) => {
            const errorPath = getControlPath(error);
            return errorPath.startsWith(childPath);
          });
          const validationClassName = getStyleAsClassName2("array.validation");
          const errorValidationClassName = getStyleAsClassName2("array.validation.error");
          const errorClassNames = errorsPerEntry ? [validationClassName].concat(errorValidationClassName).join(" ") : validationClassName;
          return import_react.default.createElement(
            "tr",
            { key: childPath },
            schema.properties ? (0, import_flow.default)(import_keys.default, (0, import_filter2.default)((prop) => schema.properties[prop].type !== "array"), (0, import_map.default)((prop) => {
              const childPropPath = Paths.compose(childPath, prop.toString());
              return import_react.default.createElement(
                "td",
                { key: childPropPath },
                import_react.default.createElement(DispatchCell, { schema: Resolve.schema(schema, `#/properties/${encode(prop)}`, rootSchema), uischema: createControlElement(encode(prop)), path: childPath + "." + prop })
              );
            }))(schema.properties) : import_react.default.createElement(
              "td",
              { key: Paths.compose(childPath, index2.toString()) },
              import_react.default.createElement(DispatchCell, { schema, uischema: createControlElement(), path: childPath })
            ),
            import_react.default.createElement("td", null, errorsPerEntry ? import_react.default.createElement("span", { className: errorClassNames }, (0, import_join.default)(errorsPerEntry.map((e) => e.message), " and ")) : import_react.default.createElement("span", { className: errorClassNames }, "OK")),
            import_react.default.createElement(
              "td",
              null,
              import_react.default.createElement("button", { type: "button", disabled: !enabled, "aria-label": translations.removeAriaLabel, onClick: () => {
                if (window.confirm(translations.deleteDialogMessage)) {
                  this.confirmDelete(childPath, index2);
                }
              } }, translations.removeTooltip)
            )
          );
        }))
      )
    );
  }
};
var TableArrayControl$1 = withVanillaControlProps(withJsonFormsArrayControlProps(withTranslateProps(withArrayTranslationProps(TableArrayControl))));
var BooleanCell = (props) => {
  const { data, className, id, enabled, uischema, path, handleChange } = props;
  return import_react.default.createElement("input", { type: "checkbox", checked: !!data, onChange: (ev) => handleChange(path, ev.target.checked), className, id, disabled: !enabled, autoFocus: uischema.options && uischema.options.focus });
};
var booleanCellTester = rankWith(2, isBooleanControl);
var BooleanCell$1 = withJsonFormsCellProps(withVanillaBooleanCellProps(BooleanCell));
var DateCell = (props) => {
  const { data, className, id, enabled, uischema, path, handleChange } = props;
  return import_react.default.createElement("input", { type: "date", value: data || "", onChange: (ev) => handleChange(path, ev.target.value), className, id, disabled: !enabled, autoFocus: uischema.options && uischema.options.focus });
};
var dateCellTester = rankWith(2, isDateControl);
var DateCell$1 = withJsonFormsCellProps(withVanillaCellProps(DateCell));
var DateTimeCell = (props) => {
  const { data, className, id, enabled, uischema, path, handleChange } = props;
  const toISOString = (inputDateTime) => {
    return inputDateTime === "" ? "" : inputDateTime + ":00.000Z";
  };
  return import_react.default.createElement("input", { type: "datetime-local", value: (data || "").substr(0, 16), onChange: (ev) => handleChange(path, toISOString(ev.target.value)), className, id, disabled: !enabled, autoFocus: uischema.options && uischema.options.focus });
};
var dateTimeCellTester = rankWith(2, isDateTimeControl);
var DateTimeCell$1 = withJsonFormsCellProps(withVanillaCellProps(DateTimeCell));
var EnumCell = (props) => {
  const { data, className, id, enabled, schema, uischema, path, handleChange, options, t } = props;
  const noneOptionLabel = (0, import_react.useMemo)(() => t("enum.none", i18nDefaults["enum.none"], { schema, uischema, path }), [t, schema, uischema, path]);
  return import_react.default.createElement("select", { className, id, disabled: !enabled, autoFocus: uischema.options && uischema.options.focus, value: data || "", onChange: (ev) => handleChange(path, ev.target.selectedIndex === 0 ? void 0 : ev.target.value) }, [
    import_react.default.createElement("option", { value: "", key: "jsonforms.enum.none" }, noneOptionLabel)
  ].concat(options.map((optionValue) => import_react.default.createElement("option", { value: optionValue.value, label: optionValue.label, key: optionValue.value }))));
};
var enumCellTester = rankWith(2, isEnumControl);
var EnumCell$1 = withJsonFormsEnumCellProps(withTranslateProps(withVanillaEnumCellProps(EnumCell)));
var toNumber$1 = (value) => value === "" ? void 0 : parseInt(value, 10);
var IntegerCell = (props) => {
  const { data, className, id, enabled, uischema, path, handleChange } = props;
  return import_react.default.createElement("input", { type: "number", step: "1", value: data ?? "", onChange: (ev) => handleChange(path, toNumber$1(ev.target.value)), className, id, disabled: !enabled, autoFocus: uischema.options && uischema.options.focus });
};
var integerCellTester = rankWith(2, isIntegerControl);
var IntegerCell$1 = withJsonFormsCellProps(withVanillaCellProps(IntegerCell));
var toNumber = (value) => value === "" ? void 0 : Number(value);
var NumberCell = (props) => {
  const { data, className, id, enabled, uischema, path, handleChange } = props;
  return import_react.default.createElement("input", { type: "number", step: "0.1", value: data ?? "", onChange: (ev) => handleChange(path, toNumber(ev.target.value)), className, id, disabled: !enabled, autoFocus: uischema.options && uischema.options.focus });
};
var numberCellTester = rankWith(2, isNumberControl);
var NumberCell$1 = withJsonFormsCellProps(withVanillaCellProps(NumberCell));
var NumberFormatCell = (props) => {
  const { className, id, enabled, uischema, path, handleChange, schema } = props;
  const maxLength = schema.maxLength;
  const formattedNumber = props.toFormatted(props.data);
  const onChange = (ev) => {
    const validStringNumber = props.fromFormatted(ev.currentTarget.value);
    handleChange(path, validStringNumber);
  };
  return import_react.default.createElement("input", { type: "text", value: formattedNumber, onChange, className, id, disabled: !enabled, autoFocus: uischema.options && uischema.options.focus, maxLength: uischema.options && uischema.options.restrict ? maxLength : void 0, size: uischema.options && uischema.options.trim ? maxLength : void 0 });
};
var numberFormatCellTester = rankWith(4, isNumberFormatControl);
var NumberFormatCell$1 = withJsonFormsCellProps(withVanillaCellProps(NumberFormatCell));
var OneOfEnumCell = (props) => {
  var _a;
  const { data, className, id, enabled, schema, uischema, path, handleChange, options, t } = props;
  const noneOptionLabel = (0, import_react.useMemo)(() => t("enum.none", i18nDefaults["enum.none"], { schema, uischema, path }), [t, schema, uischema, path]);
  const noneOption = import_react.default.createElement("option", { value: "", key: "jsonforms.enum.none" }, noneOptionLabel);
  return import_react.default.createElement("select", { className, id, disabled: !enabled, autoFocus: uischema.options && uischema.options.focus, value: data || "", onChange: (ev) => handleChange(path, ev.target.selectedIndex === 0 ? void 0 : ev.target.value) }, (((_a = uischema.options) == null ? void 0 : _a.hideEmptyOption) === true ? [] : [noneOption]).concat(options.map((optionValue) => import_react.default.createElement("option", { value: optionValue.value, label: optionValue.label, key: optionValue.value }))));
};
var oneOfEnumCellTester = rankWith(2, isOneOfEnumControl);
var OneOfEnumCell$1 = withJsonFormsOneOfEnumCellProps(withTranslateProps(withVanillaEnumCellProps(OneOfEnumCell)));
var SliderCell = (props) => {
  const { data, className, id, enabled, uischema, schema, path, handleChange } = props;
  return import_react.default.createElement(
    "div",
    { style: { display: "flex" } },
    import_react.default.createElement("input", { type: "range", max: schema.maximum, min: schema.minimum, value: data || schema.default, onChange: (ev) => handleChange(path, Number(ev.target.value)), className, id, disabled: !enabled, autoFocus: uischema.options && uischema.options.focus, style: { flex: "1" } }),
    import_react.default.createElement("label", { style: { marginLeft: "0.5em" } }, data || schema.default)
  );
};
var sliderCellTester = rankWith(4, isRangeControl);
var SliderCell$1 = withJsonFormsCellProps(withVanillaCellProps(SliderCell));
var TextCell = (props) => {
  const { config, data, className, id, enabled, uischema, schema, path, handleChange } = props;
  const maxLength = schema.maxLength;
  const appliedUiSchemaOptions = (0, import_merge.default)({}, config, uischema.options);
  return import_react.default.createElement("input", { type: appliedUiSchemaOptions.format === "password" ? "password" : "text", value: data || "", onChange: (ev) => handleChange(path, ev.target.value === "" ? void 0 : ev.target.value), className, id, disabled: !enabled, autoFocus: appliedUiSchemaOptions.focus, placeholder: appliedUiSchemaOptions.placeholder, maxLength: appliedUiSchemaOptions.restrict ? maxLength : void 0, size: appliedUiSchemaOptions.trim ? maxLength : void 0 });
};
var textCellTester = rankWith(1, isStringControl);
var TextCell$1 = withJsonFormsCellProps(withVanillaCellProps(TextCell));
var TextAreaCell = (props) => {
  const { data, className, id, enabled, config, uischema, path, handleChange } = props;
  const appliedUiSchemaOptions = (0, import_merge.default)({}, config, uischema.options);
  return import_react.default.createElement("textarea", { value: data || "", onChange: (ev) => handleChange(path, ev.target.value === "" ? void 0 : ev.target.value), className, id, disabled: !enabled, autoFocus: appliedUiSchemaOptions.focus, placeholder: appliedUiSchemaOptions.placeholder });
};
var textAreaCellTester = rankWith(2, isMultiLineControl);
var TextAreaCell$1 = withJsonFormsCellProps(withVanillaCellProps(TextAreaCell));
var appendSecondsIfNecessary = (value) => {
  if (typeof value === "string") {
    const splitValue = value.split(":");
    if (splitValue.length === 2) {
      splitValue.push("00");
    }
    return splitValue.join(":");
  }
  return value;
};
var TimeCell = (props) => {
  const { data, className, id, enabled, uischema, path, handleChange } = props;
  return import_react.default.createElement("input", { type: "time", value: data || "", onChange: (ev) => handleChange(path, appendSecondsIfNecessary(ev.target.value)), className, id, disabled: !enabled, autoFocus: uischema.options && uischema.options.focus });
};
var timeCellTester = rankWith(2, isTimeControl);
var TimeCell$1 = withJsonFormsCellProps(withVanillaCellProps(TimeCell));
var CustomizableCells = Object.freeze({
  __proto__: null,
  BooleanCell,
  DateCell,
  DateTimeCell,
  EnumCell,
  IntegerCell,
  NumberCell,
  NumberFormatCell,
  SliderCell,
  TextCell,
  TextAreaCell,
  TimeCell
});
var renderChildren = (layout, schema, className, path, enabled) => {
  if ((0, import_isEmpty.default)(layout.elements)) {
    return [];
  }
  const { renderers, cells } = useJsonForms();
  return layout.elements.map((child, index2) => {
    return import_react.default.createElement(
      "div",
      { className, key: `${path}-${index2}` },
      import_react.default.createElement(JsonFormsDispatch, { renderers, cells, uischema: child, schema, path, enabled })
    );
  });
};
var groupTester = rankWith(1, uiTypeIs("Group"));
var GroupLayoutRenderer = (props) => {
  const { data: _data, ...otherProps } = props;
  return import_react.default.createElement(GroupLayoutRendererComponent, { ...otherProps });
};
var GroupLayoutRendererComponent = import_react.default.memo(function GroupLayoutRendererComponent2({ schema, uischema, path, enabled, visible, label, getStyle: getStyle2, getStyleAsClassName: getStyleAsClassName2 }) {
  const group = uischema;
  const elementsSize = group.elements ? group.elements.length : 0;
  const classNames = getStyleAsClassName2("group.layout");
  const childClassNames = ["group-layout-item"].concat(getStyle2("group.layout.item", elementsSize)).join(" ");
  return import_react.default.createElement(
    "fieldset",
    { className: classNames, hidden: visible === void 0 || visible === null ? false : !visible },
    !(0, import_isEmpty.default)(label) ? import_react.default.createElement("legend", { className: getStyleAsClassName2("group.label") }, label) : "",
    renderChildren(group, schema, childClassNames, path, enabled)
  );
});
var GroupLayout = withVanillaControlProps(withJsonFormsLayoutProps(GroupLayoutRenderer));
var JsonFormsLayout = ({ className, children, visible }) => {
  return import_react.default.createElement("div", { className, hidden: visible === void 0 || visible === null ? false : !visible }, children);
};
var horizontalLayoutTester = rankWith(1, uiTypeIs("HorizontalLayout"));
var HorizontalLayoutRenderer = (props) => {
  const { data: _data, ...otherProps } = props;
  return import_react.default.createElement(HorizontalLayoutRendererComponent, { ...otherProps });
};
var HorizontalLayoutRendererComponent = import_react.default.memo(function HorizontalLayoutRendererComponent2({ schema, uischema, getStyle: getStyle2, getStyleAsClassName: getStyleAsClassName2, enabled, visible, path }) {
  const horizontalLayout = uischema;
  const elementsSize = horizontalLayout.elements ? horizontalLayout.elements.length : 0;
  const layoutClassName = getStyleAsClassName2("horizontal.layout");
  const childClassNames = ["horizontal-layout-item"].concat(getStyle2("horizontal.layout.item", elementsSize)).join(" ");
  return import_react.default.createElement(JsonFormsLayout, { className: layoutClassName, visible, enabled, path, uischema, schema, getStyle: getStyle2, getStyleAsClassName: getStyleAsClassName2 }, renderChildren(horizontalLayout, schema, childClassNames, path, enabled));
});
var HorizontalLayout = withVanillaControlProps(withJsonFormsLayoutProps(HorizontalLayoutRenderer, false));
var verticalLayoutTester = rankWith(1, uiTypeIs("VerticalLayout"));
var VerticalLayoutRenderer = (props) => {
  const { data: _data, ...otherProps } = props;
  return import_react.default.createElement(VerticalLayoutRendererComponent, { ...otherProps });
};
var VerticalLayoutRendererComponent = import_react.default.memo(function VerticalLayoutRendererComponent2({ schema, uischema, path, visible, enabled, getStyle: getStyle2, getStyleAsClassName: getStyleAsClassName2 }) {
  const verticalLayout = uischema;
  const elementsSize = verticalLayout.elements ? verticalLayout.elements.length : 0;
  const layoutClassName = getStyleAsClassName2("vertical.layout");
  const childClassNames = ["vertical-layout-item"].concat(getStyle2("vertical.layout.item", elementsSize)).join(" ");
  return import_react.default.createElement(JsonFormsLayout, { className: layoutClassName, uischema, schema, visible, enabled, path, getStyle: getStyle2, getStyleAsClassName: getStyleAsClassName2 }, renderChildren(verticalLayout, schema, childClassNames, path, enabled));
});
var VerticalLayout = withVanillaControlProps(withJsonFormsLayoutProps(VerticalLayoutRenderer, false));
var vanillaRenderers = [
  { tester: inputControlTester, renderer: InputControl$1 },
  { tester: radioGroupControlTester, renderer: RadioGroupControl$1 },
  { tester: oneOfRadioGroupControlTester, renderer: OneOfRadioGroupControl$1 },
  { tester: arrayControlTester, renderer: ArrayControlRenderer$1 },
  { tester: labelRendererTester, renderer: LabelRenderer$1 },
  { tester: categorizationTester, renderer: CategorizationRenderer$1 },
  { tester: tableArrayControlTester, renderer: TableArrayControl$1 },
  { tester: groupTester, renderer: GroupLayout },
  { tester: verticalLayoutTester, renderer: VerticalLayout },
  { tester: horizontalLayoutTester, renderer: HorizontalLayout }
];
var vanillaCells = [
  { tester: booleanCellTester, cell: BooleanCell$1 },
  { tester: dateCellTester, cell: DateCell$1 },
  { tester: dateTimeCellTester, cell: DateTimeCell$1 },
  { tester: enumCellTester, cell: EnumCell$1 },
  { tester: integerCellTester, cell: IntegerCell$1 },
  { tester: numberCellTester, cell: NumberCell$1 },
  { tester: oneOfEnumCellTester, cell: OneOfEnumCell$1 },
  { tester: sliderCellTester, cell: SliderCell$1 },
  { tester: textAreaCellTester, cell: TextAreaCell$1 },
  { tester: textCellTester, cell: TextCell$1 },
  { tester: timeCellTester, cell: TimeCell$1 }
];
export {
  ArrayControlRenderer$1 as ArrayControl,
  BooleanCell$1 as BooleanCell,
  CategorizationRenderer$1 as Categorization,
  CustomizableCells as Customizable,
  DateCell$1 as DateCell,
  DateTimeCell$1 as DateTimeCell,
  EnumCell$1 as EnumCell,
  GroupLayout,
  HorizontalLayout,
  InputControl$1 as InputControl,
  IntegerCell$1 as IntegerCell,
  JsonFormsStyleContext,
  LabelRenderer$1 as LabelRenderer,
  NumberCell$1 as NumberCell,
  NumberFormatCell$1 as NumberFormatCell,
  OneOfEnumCell$1 as OneOfEnumCell,
  OneOfRadioGroupControl$1 as OneOfRadioGroupControl,
  REGISTER_STYLE,
  REGISTER_STYLES,
  RadioGroupControl$1 as RadioGroupControl,
  SliderCell$1 as SliderCell,
  TableArrayControl$1 as TableArrayControl,
  TextAreaCell$1 as TextAreaCell,
  TextCell$1 as TextCell,
  TimeCell$1 as TimeCell,
  UNREGISTER_STYLE,
  VerticalLayout,
  addVanillaCellProps,
  addVanillaControlProps,
  addVanillaLayoutProps,
  arrayControlTester,
  booleanCellTester,
  categorizationTester,
  dateCellTester,
  dateTimeCellTester,
  enumCellTester,
  getStyle,
  getStyleAsClassName,
  groupTester,
  horizontalLayoutTester,
  i18nDefaults,
  inputControlTester,
  integerCellTester,
  labelRendererTester,
  numberCellTester,
  numberFormatCellTester,
  oneOfEnumCellTester,
  oneOfRadioGroupControlTester,
  radioGroupControlTester,
  registerStyle$1 as registerStyle,
  registerStyles,
  sliderCellTester,
  stylingReducer,
  tableArrayControlTester,
  textAreaCellTester,
  textCellTester,
  timeCellTester,
  unregisterStyle,
  useStyleContext,
  useStyles,
  vanillaCells,
  vanillaRenderers,
  vanillaStyles,
  verticalLayoutTester,
  withAjvProps,
  withVanillaBooleanCellProps,
  withVanillaCellProps,
  withVanillaControlProps,
  withVanillaEnumCellProps
};
//# sourceMappingURL=@jsonforms_vanilla-renderers.js.map
